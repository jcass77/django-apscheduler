# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
    push:
        branches: [ develop ]
    pull_request:
        branches: [ develop ]

jobs:
    lint:
        name: Check code style
        runs-on: ubuntu-latest
        container: python:3-slim
        steps:
            -   uses: actions/checkout@v2
            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install flake8 black
            -   name: Blacken code
                run: black . --safe --quiet
            -   name: Lint with flake8
                run: |
                    # stop the build if there are Python syntax errors or undefined names
                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    test:
        name: Test (Python, Django)
        runs-on: ubuntu-latest
        needs: lint
        strategy:
            matrix:
                python-version: [ 3.8, 3.9, "3.10" ]
                django-version: [ "3.2", "4.0" ]
        env:
            PYTHON: ${{ matrix.python-version }}
            DJANGO: ${{ matrix.django-version }}
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade django~=${{ matrix.django-version }}
                    if [ -f requirements/local.txt ]; then pip install -r requirements/local.txt; fi
            -   name: Test with pytest and update coverage
                run: |
                    coverage run -m pytest
                    coverage xml
            -   name: Upload coverage to Codecov
                uses: codecov/codecov-action@v1
                with:
                    token: ${{ secrets.CODECOV_TOKEN }}
                    files: coverage.xml
                    flags: unittests
                    env_vars: PYTHON, DJANGO
                    fail_ci_if_error: true
                    verbose: true
